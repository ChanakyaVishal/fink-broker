#!/bin/bash
# Copyright 2019 AstroLab Software
# Author: Abhishek Chauhan
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
set -e

message_help="""
Manage Fink's Kafka Server for Alert Distribution \n\n
Usage:\n
  \tfink_kafka [option] \n\n
Option:\n
  \tstart\n
    \t\tStarts Zookeeper Server and a Kafka Cluster \n\n
  \tstop \n
    \t\tStops the running Kafka Cluster and Zookeeper Server \n\n
  \t-h, --help \n
    \t\tTo view this help message \n\n
  \t--create-topic <TOPIC> \n
    \t\tCreates a topic named <TOPIC> if it does not already exist \n\n
  \t--delete-topic <TOPIC> \n
    \t\tDeletes an existing topic <TOPIC> \n\n
  \t--describe-topic <TOPIC> \n
    \t\tLists out details for the given topic <TOPIC> \n\n
  \t--list-topics \n
    \t\tLists all the topics \n\n
  \t--authentication [-a] [-d] [-u user] [-p password] [-h] \n
    \t\tAuthenticate users on Fink's Kafka Cluster (use -h for more help) \n\n
"""
# Show help if no arguments is given
if [[ $1 == "" ]]; then
  echo -e $message_help
  exit 1
fi

# function to create SCRAM credentials
create_scram_credential() {
  username="$1"
  password="$2"

  ${KAFKA_HOME}/bin/kafka-configs.sh \
  --zookeeper localhost:2182 \
  --alter \
  --add-config "SCRAM-SHA-512=[password=${password}]" \
  --entity-type users \
  --entity-name ${username}
}

# function to delete SCRAM credentials
delete_scram_credential() {
  username="$1"

  ${KAFKA_HOME}/bin/kafka-configs.sh \
  --zookeeper localhost:2182 \
  --alter \
  --delete-config 'SCRAM-SHA-512' \
  --entity-type users \
  --entity-name ${username}
}

case "$1" in
  "start")
      # Try to Start the Zookeeper with 3 attempts
      i=0
      ZK_PID=""
      while [ $i -lt 3 ] && [ -z "$ZK_PID" ]; do
        # Start the Zookeeper
        ${KAFKA_HOME}/bin/zookeeper-server-start.sh ${FINK_HOME}/conf/kafka.zookeeper.properties > /dev/null 2>&1 &
        sleep 3
        ZK_PID=$( lsof -i :2182 | grep -i "java" | awk 'NR==1{ print $2 }' )
        i=$[$i+1]
      done

      # Create SCRAM Credentials
      # For brokers
      create_scram_credential admin admin-secret
      # For Fink producer
      create_scram_credential finkProducer finkProducer-secret
      # For Fink's test consumer
      create_scram_credential finkConsumer finkConsumer-secret

      # Try to start the Kafka server with 3 attempts
      j=0
      KAFKA_PID=""
      while [ $j -lt 3 ] && [ -z "$KAFKA_PID" ]; do
        # Set security opts
        unset KAFKA_OPTS
        export KAFKA_OPTS="-Djava.security.auth.login.config=${FINK_HOME}/conf/fink_kafka_server_jaas.conf"
        # Start the Kafka Server(Brokers)
        ${KAFKA_HOME}/bin/kafka-server-start.sh ${FINK_HOME}/conf/fink_kafka.server.properties > /dev/null 2>&1 &
        sleep 3
        KAFKA_PID=$( lsof -i :9093 | grep -i "java" | awk 'NR==1{ print $2 }' )
        j=$[$j+1]
      done

      if [ -n "$ZK_PID" ] && [ -n "$KAFKA_PID" ]
      then
        echo "Kafka Server started successfully"
      else
        echo "Starting Kafka Server failed"
      fi
      ;;
  "stop")
      # Stop Kafka brokers
      ${KAFKA_HOME}/bin/kafka-server-stop.sh ${FINK_HOME}/conf/kafka.server.properties > /dev/null 2>&1 &
      sleep 1

      # Stop Zookeeper
      ${KAFKA_HOME}/bin/zookeeper-server-stop.sh ${FINK_HOME}/conf/kafka.zookeeper.properties > /dev/null 2>&1 &
      sleep 1

      echo "Kafka Server stopped"
      ;;
  "--create-topic")
      if [[ $2 == "" ]]; then
        echo "$1 requires an argument (Topic Name)" >&2
        exit 1
      fi
      TOPIC=$2
      # create the topic if does not already exist
      ${KAFKA_HOME}/bin/kafka-topics.sh \
      --create \
      --if-not-exists \
      --partitions 1 \
      --replication-factor 1 \
      --topic $TOPIC \
      --zookeeper "localhost:2182"
      # Note --bootstrap-server <string of host:port> can't be used with --if-not-exists
      ;;
  "--delete-topic")
      if [[ $2 == "" ]]; then
        echo "$1 requires an argument (Topic Name)" >&2
        exit 1
      fi
      TOPIC=$2
      # delete the topic
      ${KAFKA_HOME}/bin/kafka-topics.sh \
      --delete \
      --topic $TOPIC \
      --zookeeper "localhost:2182"  >&1
      ;;
"--describe-topic")
    if [[ $2 == "" ]]; then
      echo "$1 requires an argument (Topic Name)" >&2
      exit 1
    fi
    TOPIC=$2
    # delete the topic
    ${KAFKA_HOME}/bin/kafka-topics.sh \
    --describe \
    --topic $TOPIC \
    --zookeeper "localhost:2182"  >&1
    ;;
  "--list-topics")
      ${KAFKA_HOME}/bin/kafka-topics.sh \
      --list \
      --zookeeper "localhost:2182" >&1
      ;;
  "--authentication")
      service="authentication"
      shift 1
      ;;
  "-h"|"--help")
      echo -e $message_help
      ;;
  -*)
      echo "unknown option: $1" >&2
      exit 1
      ;;
  *)
      echo "unknown argument: $1" >&2
      exit 1
      ;;
esac

authentication_usage() {
  cat <<END

 Usage:
        fink_kafka --authentication [-a] [-d] [-u user] [-p password] [-h]

 Add/delete credentials for user's authentication
        -a: add user's credentials (default)
        -d: delete user's credentials (optional)
        -u: username
        -p: password (not required for delete)
        -h: to view this help message

END
}

if [[ $service == "authentication" ]]; then
  if [[ $# -lt 1 ]]; then
    echo "Insufficient arguments for service: ${service}"
    authentication_usage
    exit 2
  fi

  declare operation="add"

  while getopts ":adu:p:h" opt; do
    case $opt in
      a)
        # do nothing (default)
        ;;
      d)
        operation="delete"
        ;;
      u)
        username=${OPTARG}
        ;;
      p)
        password=${OPTARG}
        ;;
      h)
        authentication_usage
        exit 0
        ;;
      :)
        if [[ ! $operation == "delete" ]]; then
          echo "error: option ${OPTARG} is missing and argument" >&2
          exit 3
        fi
        ;;
      \?)
        echo "error: unknown option -${OPTARG}" >&2
        exit 4
        ;;
    esac
  done

  if [[ $operation == "add" ]]; then
    if [[ $username && $password ]]; then
      create_scram_credential "$username" "$password"
    else
      echo "error: missing username/password" >&2
      exit 5
    fi
  elif [[ $operation == "delete" ]]; then
    if [[ $username ]]; then
      delete_scram_credential "$username"
    else
      echo "error: missing username" >&2
      exit 5
    fi
  fi

fi
